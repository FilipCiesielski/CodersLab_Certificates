{"version":3,"sources":["Home/Home.js","CertificateMain/CertificateMain.js","CertificatePortfolioLab/CertificatePortfolioLabb.js","Supplement/Supplement.js","App/App.js","serviceWorker.js","index.js"],"names":["Home","className","to","Component","CertificateMain","name","CertificatePortfolioLab","Supplement","activeClass","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0XAyBeA,E,iLAnBP,OACD,oCACc,yBAAKC,UAAW,SAC1B,6BAASA,UAAW,aAChB,gCAAS,kBAAC,IAAD,CAAOC,GAAI,QAAX,4BACT,gCAAS,kBAAC,IAAD,CAAOA,GAAI,cAAX,YAAkC,6BAAlC,eACT,gCAAQ,kBAAC,IAAD,CAAMA,GAAI,aAAV,aAAiC,6BAAjC,aAAgD,6BAAhD,wB,GARJC,aCoBJC,G,uLAjBP,OACI,oCACI,6BAASC,KAAK,OAAOJ,UAAW,aACpC,yBAAKA,UAAW,qBAOZ,yBAAKA,UAAW,OAAhB,OAA2B,gCAAS,kBAAC,IAAD,CAAOC,GAAI,KAAX,e,GAZtBC,c,QCmBfG,G,uLAjBP,OACI,oCACI,6BAASD,KAAK,YAAYJ,UAAW,aACzC,yBAAKA,UAAW,6BAOZ,yBAAKA,UAAW,OAAhB,OAA2B,gCAAS,kBAAC,IAAD,CAAOC,GAAI,KAAX,e,GAZdC,cC6BvBI,G,uLA3BP,OACI,oCACI,yBAAKN,UAAW,OAAhB,OAA2B,gCAAS,kBAAC,IAAD,CAAMO,YAAY,SAASN,GAAI,QAA/B,6BACpC,6BAASG,KAAK,aAAaJ,UAAW,aAElC,yBAAKA,UAAW,SAGhB,yBAAKA,UAAW,SAGhB,yBAAKA,UAAW,gBASpB,yBAAKA,UAAW,OAAhB,OAA2B,gCAAS,kBAAC,IAAD,CAAMC,GAAI,KAAV,e,GAtB3BC,cC0BVM,MAvBf,WACE,OAGF,yBAAKR,UAAW,OAER,kBAAC,IAAD,KAEI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAM,IAAKC,UAAWZ,IACnC,kBAAC,IAAD,CAAOW,KAAM,QAASC,UAAWR,IACjC,kBAAC,IAAD,CAAOO,KAAM,aAAcC,UAAWN,IACtC,kBAAC,IAAD,CAAOK,KAAM,cAAeC,UAAWL,QCRnCM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6be411aa.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport \"./Home.scss\"\nimport {Link} from \"react-router-dom\";\n\nclass Home extends Component {\n    render() {\n        return (\n       <>\n                     <div className={\"logo\"}></div>\n           <section className={\"container\"}>\n               <button ><Link  to={\"main\"}>Dyplom Javascript:React</Link></button>\n               <button ><Link  to={\"supplement\"}>Suplement<br/>do dyplomu</Link></button>\n               <button><Link to={\"portfolio\"}>Suplement <br/>do dyplomu<br/>Portfolio Lab</Link></button>\n\n\n\n           </section>\n\n\n            </>\n        )\n    }\n}\n\n\nexport default Home;","import React, {Component} from 'react';\nimport \"./CertificateMain.scss\"\nimport {Link} from \"react-router-dom\";\n\n\nclass CertificateMain extends Component {\n    render() {\n        return (\n            <>\n                <section name=\"main\" className={\"container\"}>\n            <div className={\"mainCertificate\"}>\n\n            </div>\n\n\n\n                </section>\n                <div className={\"nav\"}>    <button ><Link  to={\"/\"}>Home</Link></button></div>\n            </>\n        )\n    }\n}\n\n\nexport default CertificateMain;","import React, {Component} from 'react';\nimport \"./CertificatePortfolioLab.scss\"\nimport {Link} from \"react-router-dom\";\n\n\nclass CertificatePortfolioLab extends Component {\n    render() {\n        return (\n            <>\n                <section name=\"portfolio\" className={\"container\"}>\n            <div className={\"certificatePortfolioLab\"}>\n\n            </div>\n\n\n\n                </section>\n                <div className={\"nav\"}>    <button ><Link  to={\"/\"}>Home</Link></button></div>\n            </>\n        )\n    }\n}\n\n\nexport default CertificatePortfolioLab;","import React, {Component} from 'react';\nimport \"./Supplement.scss\"\nimport {HashRouter, Link} from \"react-router-dom\";\n\n\nclass Supplement extends Component {\n    render() {\n        return (\n            <>\n                <div className={\"nav\"}>    <button ><Link activeClass=\"active\" to={\"main\"}>Dyplom Javascript:React</Link></button></div>\n                <section name=\"supplement\" className={\"container\"}>\n\n                    <div className={\"sup1\"}>\n\n                    </div>\n                    <div className={\"sup2\"}>\n\n                    </div>\n                    <div className={\"buttonPrev\"}>\n                    </div>\n\n\n\n\n\n                </section>\n\n                <div className={\"nav\"}>    <button ><Link to={\"/\"}>Home</Link></button></div>\n            </>\n        )\n    }\n}\n\n\nexport default Supplement;","import React from 'react';\nimport './App.scss';\nimport Home from \"../Home/Home\";\nimport CertificateMain from \"../CertificateMain/CertificateMain\";\nimport {HashRouter, Switch, Route, Link} from \"react-router-dom\";\nimport CertificatePortfolioLab from \"../CertificatePortfolioLab/CertificatePortfolioLabb\";\nimport Supplement from \"../Supplement/Supplement\";\n\nfunction App() {\n  return (\n\n\n<div className={\"app\"}>\n\n        <HashRouter>\n\n            <Switch>\n                <Route exact path={\"/\"} component={Home}/>\n                <Route path={\"/main\"} component={CertificateMain}/>\n                <Route path={\"/portfolio\"} component={CertificatePortfolioLab}/>\n                <Route path={\"/supplement\"} component={Supplement}/>\n\n            </Switch>\n\n        </HashRouter>\n\n</div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}